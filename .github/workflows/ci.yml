name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install -r requirements.txt
      - name: Lint (flake8)
        run: flake8 enisai

  docker-build-push:
    needs: lint-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          load: ${{ github.event_name == 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Export image as artifact (PRs only)
        if: github.event_name == 'pull_request'
        env:
          IMAGE_TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          IMAGE=$(echo "$IMAGE_TAGS" | head -n1)
          echo "Saving $IMAGE to image.tar"
          docker save "$IMAGE" -o image.tar

      - name: Upload image artifact (PRs only)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-tar
          path: image.tar

  security-scan:
    needs: docker-build-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.2
      - name: Scan image with Trivy
        run: |
          echo "${{ steps.meta.outputs.tags }}" > tags.txt || true
          TAG=$(grep ghcr.io tags.txt | head -n1)
          if [ -z "$TAG" ]; then echo "No tag found; skipping"; exit 0; fi
          trivy image --severity HIGH,CRITICAL --no-progress "$TAG"

  terraform-plan-aws:
    if: github.ref == 'refs/heads/main'
    needs: security-scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform/aws
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      - name: Configure AWS Credentials (OIDC)
        if: ${{ secrets.AWS_ROLE_ARN != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
      - name: Configure AWS Credentials (Access Keys)
        if: ${{ secrets.AWS_ROLE_ARN == '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Terraform Init
        run: terraform init -input=false
      - name: Terraform Plan
        env:
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_key_name: ${{ secrets.AWS_KEY_NAME }}
          TF_VAR_image: ghcr.io/${{ github.repository }}:latest
        run: terraform plan -input=false -out=tfplan
      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/aws/tfplan

  terraform-apply-aws:
    if: github.ref == 'refs/heads/main'
    needs: terraform-plan-aws
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      id-token: write
    defaults:
      run:
        working-directory: terraform/aws
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      - name: Configure AWS Credentials (OIDC)
        if: ${{ secrets.AWS_ROLE_ARN != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
      - name: Configure AWS Credentials (Access Keys)
        if: ${{ secrets.AWS_ROLE_ARN == '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Terraform Init
        run: terraform init -input=false
      - name: Terraform Apply
        env:
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_key_name: ${{ secrets.AWS_KEY_NAME }}
          TF_VAR_image: ghcr.io/${{ github.repository }}:latest
        run: terraform apply -input=false -auto-approve

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: terraform-apply-aws
    runs-on: ubuntu-latest
    steps:
      - name: Prepare variables
        id: vars
        run: |
          echo "owner=${GITHUB_REPOSITORY%/*}" >> $GITHUB_OUTPUT
          echo "repo=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT
      - name: SSH and deploy with docker compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            set -e
            export IMAGE_NAME=ghcr.io/${{ steps.vars.outputs.owner }}/${{ steps.vars.outputs.repo }}:latest
            cd ${{ secrets.DEPLOY_PATH }}
            echo "Pulling $IMAGE_NAME"
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin
            docker pull $IMAGE_NAME || true
            IMAGE_NAME=$IMAGE_NAME docker compose up -d --pull always --no-deps enisai
