name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install -r requirements.txt
      - name: Lint (flake8)
        run: flake8 enisai

  docker-build-push:
    needs: lint-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names enisai --region ${{ secrets.AWS_REGION }} || \
          aws ecr create-repository --repository-name enisai --region ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: enisai
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Export image as artifact (PRs only)
        if: github.event_name == 'pull_request'
        run: |
          docker save ${{ steps.build-image.outputs.image }} -o image.tar

      - name: Upload image artifact (PRs only)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-tar
          path: image.tar

  security-scan:
    needs: docker-build-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.2
      - name: Scan image with Trivy
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: enisai
          IMAGE_TAG: ${{ github.sha }}
        run: |
          trivy image --severity HIGH,CRITICAL --no-progress $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  terraform-plan-aws:
    if: github.ref == 'refs/heads/main'
    needs: security-scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform/aws
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Terraform Init
        run: terraform init -input=false
      - name: Terraform Plan
        env:
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_image: ${{ steps.login-ecr.outputs.registry }}/enisai:${{ github.sha }}
        run: terraform plan -input=false -out=tfplan
      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/aws/tfplan

  terraform-apply-aws:
    if: github.ref == 'refs/heads/main'
    needs: terraform-plan-aws
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: terraform/aws
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Terraform Init
        run: terraform init -input=false
      - name: Import existing ECS service
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_image: ${{ steps.login-ecr.outputs.registry }}/enisai:${{ github.sha }}
        run: |
          # Try to import existing service, ignore if it fails
          ./import-service.sh || echo "Service import failed or not needed"
      - name: Terraform Apply
        env:
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_image: ${{ steps.login-ecr.outputs.registry }}/enisai:${{ github.sha }}
        run: terraform apply -input=false -auto-approve

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: terraform-apply-aws
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Force new deployment
        run: |
          aws ecs update-service \
            --cluster enisai-cluster \
            --service enisai-service \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}
